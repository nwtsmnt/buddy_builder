doctype html
html(lang="en")
  head
    meta(charset="UTF-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    title Study Buddies - Chat
    link(rel="stylesheet", href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css")
    link(rel="stylesheet", href="/css/chat.css")
  input#logged-in-user-id(type="hidden" value=userId)
  body
    .app-container
      nav.sidebar
        .logo
          i.fas.fa-graduation-cap
          span Study Buddies
        .nav-links
          a.nav-link(href="/newsfeed")
            i.fas.fa-home
            span Home
          a.nav-link(href="/profile")
            i.fas.fa-user
            span My Profile
          a.nav-link.active(href="/chat")
            i.fas.fa-comments
            span Chats
          a.nav-link(href="/groups")
            i.fas.fa-users
            span Groups
          a.nav-link(href="/add-people")
            i.fas.fa-user-plus
            span Add People
          a.nav-link(href="/add_post")
            i.fas.fa-plus-circle
            span Add Post
          a.nav-link(href="/about-us")
            i.fas.fa-info-circle
            span About Us
          a.nav-link(href="/logout")
            i.fas.fa-sign-out-alt
            span Log Out

      .main-content
        header.top-bar
          .search-container
            i.fas.fa-search
            input.search-input(type="text" placeholder="Search conversations...")
          .user-menu
            .profile-menu
              if user && user.avatar_url
                img.avatar(src=user.avatar_url alt="Profile")
              else
                img.avatar(src="/images/default-avatar.png" alt="Default Profile Picture")
              span.username #{user ? user.name : 'User'}

        .chat-content
          .chat-sidebar
            .chat-sidebar-header
              h3 Conversations
              button.new-chat-btn#add-conversation-btn
                i.fas.fa-plus

              // Add a search bar for finding users
              div#user-search-container.hidden
                input#user-search-input(type="text" placeholder="Search for users...")
                ul#user-search-results

            .conversation-list
              ul#conversation-list

          .chat-main
            .chat-header
              .chat-contact
                img.contact-avatar(src="/images/default-avatar.png" alt="Contact")
                .contact-info
                  .contact-name Contact Name
                  .contact-status
                    span.status-dot.online
                    | Online
              .chat-actions
                button.action-btn
                  i.fas.fa-phone
                button.action-btn
                  i.fas.fa-video
                button.action-btn
                  i.fas.fa-ellipsis-v

            .messages-container
              // Messages will be dynamically populated here

            .message-composer
              button.attachment-btn
                i.fas.fa-paperclip
              textarea.message-input(placeholder="Type a message...")
              button.emoji-btn
                i.fas.fa-smile
              button.send-btn
                i.fas.fa-paper-plane

          .notes-sidebar
            .notes-header
              h3 Study Notes
              button.minimize-btn
                i.fas.fa-chevron-right
            .notes-content
              textarea.notes-textarea(placeholder="Take notes for your conversation here...")
            .notes-actions
              button.notes-btn.secondary
                i.fas.fa-trash
                | Clear
              button.notes-btn.primary
                i.fas.fa-save
                | Save

        // Add Conversation Modal
        div#add-conversation-modal.hidden
          input#user-search-input(type="text" placeholder="Search for users...")
          ul#user-search-results

script(src="/socket.io/socket.io.js")
script.
  // Dynamically determine the WebSocket server URL
  const wsProtocol = window.location.protocol === 'https:' ? 'wss' : 'ws';
  const wsHost = window.location.hostname; // Use the current hostname
  const wsPort = 8080; // WebSocket server port
  const ws = new WebSocket(`${wsProtocol}://${wsHost}:${wsPort}`); // Connect to the WebSocket server

  // Get the logged-in user ID from the hidden input
  const loggedInUserId = document.getElementById('logged-in-user-id').value;

  // Register the user with the WebSocket server
  ws.onopen = () => {
    ws.send(JSON.stringify({ type: 'register', userId: loggedInUserId }));
    console.log('WebSocket connection established');
  };

  // Handle incoming messages
  ws.onmessage = (event) => {
    try {
      const data = JSON.parse(event.data);

      if (data.type === 'newMessage') {
        const messagesContainer = document.querySelector('.messages-container');
        const messageElement = document.createElement('div');
        const isSent = data.senderId === loggedInUserId;

        messageElement.classList.add('message', isSent ? 'sent' : 'received');
        messageElement.innerHTML = `
          <div class="message-avatar">
            <img src="${data.senderAvatar || '/images/default-avatar.png'}" alt="Avatar">
          </div>
          <div class="message-content">
            <div class="message-bubble">${data.message}</div>
            <div class="message-time">${new Date(data.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</div>
          </div>
        `;

        messagesContainer.appendChild(messageElement);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
      }
    } catch (error) {
      console.error('Error handling incoming message:', error);
    }
  };

  // Send a real-time message
  async function sendMessage() {
    const messageInput = document.querySelector('.message-input');
    const message = messageInput.value.trim();
    if (!message) return;

    const activeConversation = document.querySelector('.conversation-item.active');
    if (!activeConversation) {
      alert('Please select a conversation first');
      return;
    }

    const receiverId = activeConversation.dataset.userId;

    // Send the message to the WebSocket server
    ws.send(
      JSON.stringify({
        type: 'sendMessage',
        receiverId,
        message,
      })
    );

    // Display the message locally
    const messagesContainer = document.querySelector('.messages-container');
    const messageElement = document.createElement('div');
    messageElement.classList.add('message', 'sent');
    messageElement.innerHTML = `
      <div class="message-avatar">
        <img src="/images/default-avatar.png" alt="Avatar">
      </div>
      <div class="message-content">
        <div class="message-bubble">${message}</div>
        <div class="message-time">${new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</div>
      </div>
    `;

    messagesContainer.appendChild(messageElement);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;

    // Clear the input field
    messageInput.value = '';
  }

  document.querySelector('.send-btn').addEventListener('click', sendMessage);
  document.querySelector('.message-input').addEventListener('keypress', (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  });

  // Add this function at the beginning of your script block
  function updateContactHeader(userName, userAvatar) {
    const contactName = document.querySelector('.contact-name');
    const contactAvatar = document.querySelector('.contact-avatar');
    
    if (contactName) contactName.textContent = userName;
    if (contactAvatar) contactAvatar.src = userAvatar || '/images/default-avatar.png';
  }
  
  async function loadConversations() {
    try {
      const response = await fetch('/chat/conversations');
      if (!response.ok) throw new Error('Failed to fetch conversations');
      const conversations = await response.json();

      const conversationList = document.getElementById('conversation-list');
      conversationList.innerHTML = ''; // Clear existing conversations

      if (conversations.length === 0) {
        conversationList.innerHTML = '<li class="no-conversations">No conversations yet</li>';
        return;
      }

      conversations.forEach(user => {
        const li = document.createElement('li');
        li.classList.add('conversation-item');
        li.dataset.userId = user.id;
        
        li.innerHTML = `
          <div class="conversation-avatar">
            <img src="${user.avatar_url || '/images/default-avatar.png'}" alt="${user.name}">
          </div>
          <div class="conversation-info">
            <div class="conversation-name">${user.name}</div>
            <div class="conversation-preview">${user.last_message || 'Start chatting...'}</div>
          </div>
        `;
        
        li.addEventListener('click', () => {
          document.querySelectorAll('.conversation-item').forEach(item => item.classList.remove('active'));
          li.classList.add('active'); // Highlight the active conversation
          updateContactHeader(user.name, user.avatar_url);
          loadMessages(user.id);
        });
        
        conversationList.appendChild(li);
      });
    } catch (error) {
      console.error('Error loading conversations:', error);
      document.getElementById('conversation-list').innerHTML = 
        '<li class="error">Failed to load conversations</li>';
    }
  }

  async function loadMessages(userId) {
    try {
      // Get reference to the messages container
      const messagesContainer = document.querySelector('.messages-container');
      
      // Show a loading indicator
      messagesContainer.innerHTML = '<div class="loading-messages">Loading messages...</div>';
      
      // Fetch messages from the backend
      const response = await fetch(`/chat/messages/${userId}`);
      if (!response.ok) throw new Error('Failed to fetch messages');
      const messages = await response.json();

      // Clear the messages container
      messagesContainer.innerHTML = '';

      console.log(`Displaying ${messages.length} messages`);

      // Handle case with no messages
      if (messages.length === 0) {
        messagesContainer.innerHTML = '<div class="no-messages">No messages yet. Start the conversation!</div>';
        return;
      }

      // Get the logged-in user ID (from a hidden input or session)
      const loggedInUserId = document.getElementById('logged-in-user-id').value;

      // Render each message as a bubble
      messages.forEach(msg => {
        const messageElement = document.createElement('div');
        const isSent = parseInt(msg.sender_id) === parseInt(loggedInUserId);
        messageElement.classList.add('message', isSent ? 'sent' : 'received');

        // Always use the sender's avatar (who wrote the message)
        const avatarUrl = msg.sender_avatar || '/images/default-avatar.png';

        messageElement.innerHTML = `
          <div class="message-avatar">
            <img src="${avatarUrl || '/images/default-avatar.png'}" alt="Avatar">
          </div>
          <div class="message-content">
            <div class="message-bubble">${msg.message}</div>
            <div class="message-time">${formatTime(new Date(msg.created_at))}</div>
          </div>
        `;

        messagesContainer.appendChild(messageElement);
      });

      // Scroll to the bottom of the messages container
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    } catch (error) {
      console.error('Error loading messages:', error);
      document.querySelector('.messages-container').innerHTML = 
        '<div class="error-message">Failed to load messages</div>';
    }
  }

  // Helper function to format timestamps
  function formatTime(date) {
    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  }

  async function startConversation(userId, userName, userAvatar) {
    try {
      const response = await fetch('/chat/start-conversation', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ userId })
      });

      if (!response.ok) throw new Error('Failed to start conversation');

      // Add to conversation list if not already there
      let conversationItem = document.querySelector(`.conversation-item[data-user-id="${userId}"]`);
      
      if (!conversationItem) {
        const conversationList = document.getElementById('conversation-list');
        const li = document.createElement('li');
        li.classList.add('conversation-item');
        li.dataset.userId = userId;
        
        li.innerHTML = `
          <div class="conversation-avatar">
            <img src="${userAvatar || '/images/default-avatar.png'}" alt="${userName}">
          </div>
          <div class="conversation-info">
            <div class="conversation-name">${userName}</div>
            <div class="conversation-preview">Start chatting...</div>
          </div>
        `;
        
        // ADD THIS: Event listener for clicking on the conversation
        li.addEventListener('click', () => {
          document.querySelectorAll('.conversation-item').forEach(item => item.classList.remove('active'));
          li.classList.add('active');
          updateContactHeader(userName, userAvatar);
          loadMessages(userId);
        });
        
        conversationList.appendChild(li);
        conversationItem = li;
        
        // Remove "no conversations" message if it exists
        const noConversations = document.querySelector('.no-conversations');
        if (noConversations) noConversations.remove();
      } else {
        // This else block is new - handle existing conversations
        conversationItem.addEventListener('click', () => {
          document.querySelectorAll('.conversation-item').forEach(item => item.classList.remove('active'));
          conversationItem.classList.add('active');
          updateContactHeader(userName, userAvatar);
          loadMessages(userId);
        });
      }

      // Simulate click on the conversation item
      document.querySelectorAll('.conversation-item').forEach(item => item.classList.remove('active'));
      conversationItem.classList.add('active');

      // Update contact header
      updateContactHeader(userName, userAvatar);
      
      // Load messages (this will show "No messages yet" initially)
      loadMessages(userId);
      
      // Hide the modal
      document.getElementById('add-conversation-modal').classList.add('hidden');
    } catch (error) {
      console.error('Error starting conversation:', error);
      alert('Failed to start conversation. Please try again.');
    }
  }

  document.getElementById('add-conversation-btn').addEventListener('click', () => {
    const modal = document.getElementById('add-conversation-modal');
    modal.classList.toggle('hidden'); // Show or hide the modal
  });

  document.getElementById('user-search-input').addEventListener('input', async (event) => {
    const query = event.target.value.trim();
    if (!query) {
      document.getElementById('user-search-results').innerHTML = '';
      return;
    }

    try {
      console.log(`Searching for users matching: "${query}"`);
      const response = await fetch(`/chat/search-users?query=${encodeURIComponent(query)}`, {
        method: 'GET',
        headers: {
          'Accept': 'application/json'
        }
      });
      
      if (!response.ok) {
        throw new Error(`Search failed with status: ${response.status}`);
      }
      
      const users = await response.json();
      console.log('Search results:', users);

      const resultsList = document.getElementById('user-search-results');
      resultsList.innerHTML = '';

      if (users.length === 0) {
        resultsList.innerHTML = '<li class="no-results">No users found</li>';
        return;
      }

      users.forEach(user => {
        const li = document.createElement('li');
        li.classList.add('user-search-item');
        li.dataset.userId = user.id;
        li.innerHTML = `
          <div class="user-avatar">
            <img src="${user.avatar_url || '/images/default-avatar.png'}" alt="${user.name}">
          </div>
          <div class="user-info">
            <div class="user-name">${user.name}</div>
          </div>
        `;
        li.addEventListener('click', () => startConversation(user.id, user.name, user.avatar_url));
        resultsList.appendChild(li);
      });
    } catch (error) {
      console.error('Error searching users:', error);
      document.getElementById('user-search-results').innerHTML = 
        '<li class="error">Error searching for users</li>';
    }
  });

  // Load conversations on page load
  loadConversations();
</script>